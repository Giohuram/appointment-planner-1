{"ast":null,"code":"var _jsxFileName = \"/Users/giovannimasala/Desktop/Coding Projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [contactInfo, setContactInfo] = useState({\n    // initial values for contact fields\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  });\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    const isExistingContact = contacts.some(contact => contact.name === contactInfo.name);\n    setIsDuplicate(isExistingContact);\n    if (!isExistingContact) {\n      // Add contact using addContact function from props\n      addContact(contactInfo.name, contactInfo.phone, contactInfo.email);\n\n      // Clear form fields after \n      setContactInfo({\n        name: \"\",\n        phone: \"\",\n        email: \"\"\n      });\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  useEffect(() => {\n    const isExistingContact = contacts.some(contact => contact.name === contactInfo.name);\n    setIsDuplicate(isExistingContact);\n  }, [contacts, contactInfo.name]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"3BFSbs2D9ShIMrhWx1fht4rs+8k=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","contactInfo","setContactInfo","name","phone","email","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","isExistingContact","some","contact","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/giovannimasala/Desktop/Coding Projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact}) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [contactInfo, setContactInfo] = useState({\r\n    // initial values for contact fields\r\n    name: \"\",\r\n    phone: \"\",\r\n    email: \"\", \r\n  });\r\n\r\n  const [isDuplicate, setIsDuplicate] = useState(false); \r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    const isExistingContact = contacts.some((contact) => contact.name === contactInfo.name); \r\n    setIsDuplicate(isExistingContact); \r\n\r\n    if (!isExistingContact){\r\n      // Add contact using addContact function from props\r\n      addContact(contactInfo.name, contactInfo.phone, contactInfo.email); \r\n\r\n      // Clear form fields after \r\n      setContactInfo({\r\n         name: \"\",\r\n         phone: \"\",\r\n         email: \"\",  \r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  useEffect(() => {\r\n    const isExistingContact = contacts.some((contact) => contact.name === contactInfo.name);\r\n    setIsDuplicate(isExistingContact);\r\n  }, [contacts, contactInfo.name]); \r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAAH,IAAA;EAClD;AACF;AACA;AACA;EACE,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC;IAC7C;IACAa,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAGrD,MAAMkB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;IACI,MAAMC,iBAAiB,GAAGZ,QAAQ,CAACa,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACV,IAAI,KAAKF,WAAW,CAACE,IAAI,CAAC;IACvFI,cAAc,CAACI,iBAAiB,CAAC;IAEjC,IAAI,CAACA,iBAAiB,EAAC;MACrB;MACAX,UAAU,CAACC,WAAW,CAACE,IAAI,EAAEF,WAAW,CAACG,KAAK,EAAEH,WAAW,CAACI,KAAK,CAAC;;MAElE;MACAH,cAAc,CAAC;QACZC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE;MACV,CAAC,CAAC;IACJ;EAEF,CAAC;;EAED;AACF;AACA;AACA;;EAEEd,SAAS,CAAC,MAAM;IACd,MAAMoB,iBAAiB,GAAGZ,QAAQ,CAACa,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACV,IAAI,KAAKF,WAAW,CAACE,IAAI,CAAC;IACvFI,cAAc,CAACI,iBAAiB,CAAC;EACnC,CAAC,EAAE,CAACZ,QAAQ,EAAEE,WAAW,CAACE,IAAI,CAAC,CAAC;EAEhC,oBACER,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,eACEnB,OAAA;QAAAmB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACZ,eACVvB,OAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNvB,OAAA;MAAAmB,QAAA,eACEnB,OAAA;QAAAmB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACpB,EAAA,CA3DWF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}