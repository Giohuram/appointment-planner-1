{"ast":null,"code":"var _jsxFileName = \"/Users/giovannimasala/Desktop/Coding Projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  const [formData, setFormData] = useState({\n    name: \"\"\n  });\n  const [duplicate, setDuplicate] = useState(false);\n\n  // Destructure only the name property for efficiency (assuming phone and email are not used)\n  const {\n    name\n  } = formData;\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!duplicate) {\n      // Assuming both name and potentially other data (phone, email) are needed\n      addContact({\n        ...formData,\n        phone: \"\",\n        email: \"\"\n      }); // Replace with actual phone and email values if needed\n      setFormData({\n        name: \"\"\n      });\n    }\n  };\n  useEffect(() => {\n    if (contacts && name) {\n      // Check if contacts and name are truthy\n      const nameIsDuplicate = contacts.some(contact => contact.name === name);\n      setDuplicate(nameIsDuplicate);\n    }\n  }, [name, contacts]); // Dependency array\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Add Contact\", duplicate && \" - Name Already Exists\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        values: formData,\n        handleChange: handleChange,\n        onSubmit: handleSubmit,\n        isDuplicate: duplicate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        items: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ContactsPage, \"NmJR77eBJj5Z1Ds8cHu5dB4RxVA=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","Fragment","_Fragment","ContactsPage","_ref","_s","contacts","addContact","formData","setFormData","name","duplicate","setDuplicate","handleChange","e","target","value","handleSubmit","preventDefault","phone","email","nameIsDuplicate","some","contact","children","fileName","_jsxFileName","lineNumber","columnNumber","values","onSubmit","isDuplicate","items","_c","$RefreshReg$"],"sources":["/Users/giovannimasala/Desktop/Coding Projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n  });\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  // Destructure only the name property for efficiency (assuming phone and email are not used)\r\n  const { name } = formData;\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!duplicate) {\r\n      // Assuming both name and potentially other data (phone, email) are needed\r\n      addContact({ ...formData, phone: \"\", email: \"\" }); // Replace with actual phone and email values if needed\r\n      setFormData({ name: \"\" });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (contacts && name) { // Check if contacts and name are truthy\r\n      const nameIsDuplicate = contacts.some((contact) => contact.name === name);\r\n      setDuplicate(nameIsDuplicate);\r\n    }\r\n  }, [name, contacts]); // Dependency array\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <h2>\r\n          Add Contact\r\n          {duplicate && \" - Name Already Exists\"}\r\n        </h2>\r\n        <ContactForm\r\n          values={formData}\r\n          handleChange={handleChange}\r\n          onSubmit={handleSubmit}\r\n          isDuplicate={duplicate}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList items={contacts} />\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAAH,IAAA;EACnD,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC;IACvCe,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM;IAAEe;EAAK,CAAC,GAAGF,QAAQ;EAEzB,MAAMK,YAAY,GAAIC,CAAC,IAAK;IAC1BL,WAAW,CAAC;MAAE,GAAGD,QAAQ;MAAE,CAACM,CAAC,CAACC,MAAM,CAACL,IAAI,GAAGI,CAAC,CAACC,MAAM,CAACC;IAAM,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMC,YAAY,GAAIH,CAAC,IAAK;IAC1BA,CAAC,CAACI,cAAc,EAAE;IAClB,IAAI,CAACP,SAAS,EAAE;MACd;MACAJ,UAAU,CAAC;QAAE,GAAGC,QAAQ;QAAEW,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC,CAAC,CAAC;MACnDX,WAAW,CAAC;QAAEC,IAAI,EAAE;MAAG,CAAC,CAAC;IAC3B;EACF,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd,IAAIU,QAAQ,IAAII,IAAI,EAAE;MAAE;MACtB,MAAMW,eAAe,GAAGf,QAAQ,CAACgB,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACb,IAAI,KAAKA,IAAI,CAAC;MACzEE,YAAY,CAACS,eAAe,CAAC;IAC/B;EACF,CAAC,EAAE,CAACX,IAAI,EAAEJ,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEtB,oBACEN,OAAA,CAAAE,SAAA;IAAAsB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,gBACExB,OAAA;QAAAwB,QAAA,GAAI,aAEF,EAACb,SAAS,IAAI,wBAAwB;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACnC,eACL5B,OAAA,CAACH,WAAW;QACVgC,MAAM,EAAErB,QAAS;QACjBK,YAAY,EAAEA,YAAa;QAC3BiB,QAAQ,EAAEb,YAAa;QACvBc,WAAW,EAAEpB;MAAU;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACM,eACV5B,OAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACN5B,OAAA;MAAAwB,QAAA,gBACExB,OAAA;QAAAwB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjB5B,OAAA,CAACF,QAAQ;QAACkC,KAAK,EAAE1B;MAAS;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACrB;EAAA,gBACT;AAEP,CAAC;AAACvB,EAAA,CAlDWF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}