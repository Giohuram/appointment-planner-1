{"ast":null,"code":"var _jsxFileName = \"/Users/giovannimasala/Desktop/Coding Projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\n\n// Assuming these props are passed from the parent component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  const [contactInfo, setContactInfo] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  });\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Check for duplicate name before adding\n    if (!isDuplicate) {\n      addContact(contactInfo.name, contactInfo.phone, contactInfo.email);\n      setContactInfo({\n        name: \"\",\n        phone: \"\",\n        email: \"\"\n      }); // Clear form\n    }\n  };\n\n  // Check for duplicate name on every change\n  useEffect(() => {\n    if (contacts) {\n      // Prevent error if contacts is undefined\n      const isExistingContact = contacts.some(contact => contact.name === contactInfo.name);\n      setIsDuplicate(isExistingContact);\n    }\n  }, [contacts, contactInfo.name]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        values: contactInfo,\n        handleChange: event => setContactInfo({\n          ...contactInfo,\n          [event.target.name]: event.target.value\n        }),\n        onSubmit: handleSubmit,\n        isDuplicate: isDuplicate // Pass duplicate state for UI feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        items: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"cfh+Po3LKe1H4xjHLZTLb95sp94=\");\n_c = ContactsPage;\nexport default ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","contactInfo","setContactInfo","name","phone","email","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","isExistingContact","some","contact","children","fileName","_jsxFileName","lineNumber","columnNumber","values","handleChange","event","target","value","onSubmit","items","_c","$RefreshReg$"],"sources":["/Users/giovannimasala/Desktop/Coding Projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\n// Assuming these props are passed from the parent component\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  const [contactInfo, setContactInfo] = useState({\r\n    name: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Check for duplicate name before adding\r\n    if (!isDuplicate) {\r\n      addContact(contactInfo.name, contactInfo.phone, contactInfo.email);\r\n      setContactInfo({ name: \"\", phone: \"\", email: \"\" }); // Clear form\r\n    }\r\n  };\r\n\r\n  // Check for duplicate name on every change\r\n  useEffect(() => {\r\n    if (contacts) { // Prevent error if contacts is undefined\r\n      const isExistingContact = contacts.some(\r\n        (contact) => contact.name === contactInfo.name\r\n      );\r\n      setIsDuplicate(isExistingContact);\r\n    }\r\n  }, [contacts, contactInfo.name]);\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          values={contactInfo}\r\n          handleChange={(event) =>\r\n            setContactInfo({ ...contactInfo, [event.target.name]: event.target.value })\r\n          }\r\n          onSubmit={handleSubmit}\r\n          isDuplicate={isDuplicate} // Pass duplicate state for UI feedback\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList items={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;;AAE7D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAAH,IAAA;EACnD,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC;IAC7Ca,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMkB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;;IAElB;IACA,IAAI,CAACJ,WAAW,EAAE;MAChBN,UAAU,CAACC,WAAW,CAACE,IAAI,EAAEF,WAAW,CAACG,KAAK,EAAEH,WAAW,CAACI,KAAK,CAAC;MAClEH,cAAc,CAAC;QAAEC,IAAI,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC,CAAC,CAAC;IACtD;EACF,CAAC;;EAED;EACAd,SAAS,CAAC,MAAM;IACd,IAAIQ,QAAQ,EAAE;MAAE;MACd,MAAMY,iBAAiB,GAAGZ,QAAQ,CAACa,IAAI,CACpCC,OAAO,IAAKA,OAAO,CAACV,IAAI,KAAKF,WAAW,CAACE,IAAI,CAC/C;MACDI,cAAc,CAACI,iBAAiB,CAAC;IACnC;EACF,CAAC,EAAE,CAACZ,QAAQ,EAAEE,WAAW,CAACE,IAAI,CAAC,CAAC;EAEhC,oBACER,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACpBvB,OAAA,CAACH,WAAW;QACV2B,MAAM,EAAElB,WAAY;QACpBmB,YAAY,EAAGC,KAAK,IAClBnB,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAE,CAACoB,KAAK,CAACC,MAAM,CAACnB,IAAI,GAAGkB,KAAK,CAACC,MAAM,CAACC;QAAM,CAAC,CAC3E;QACDC,QAAQ,EAAEhB,YAAa;QACvBF,WAAW,EAAEA,WAAY,CAAC;MAAA;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC1B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACM,eACVvB,OAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNvB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjBvB,OAAA,CAACF,QAAQ;QAACgC,KAAK,EAAE1B;MAAS;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACrB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACpB,EAAA,CAjDWF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAmDzB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}